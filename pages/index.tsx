import { useEffect, useState } from "react";
import Head from "next/head";

import { AnimatePresence, motion } from "framer-motion";
import Layout from "@/components/Layout";

import ImageAnimation from "@/components/ImageAnimation";
import { useAppDispatch, useAppState } from "@/utils/appReducer";

import { useRouter } from "next/router";
import Image from "next/image";
import Link from "next/link";
import ImageAnimation2 from "@/components/ImageAnimation2";

export default function Home() {
  const { orderedGallery } = useAppState();

  // console.log("isHomepage", isHomepage);
  const dispatch = useAppDispatch();
  // const x = useMotionValue(0);
  // useMotionValueEvent(x, "change", (latest) => {
  //   console.log("x changed to", latest);
  // });
  const [titleTextDelayDuration, setTitleTextDelayDuration] = useState(1.5);

  const [showNumber, setShowNumber] = useState(0);
  console.log("showNumber", showNumber);

  const [isNextPressed, setIsNextPressed] = useState(false);
  const [windowSize, setWindowSize] = useState(0);

  useEffect(() => {
    function handleResize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, []);
  useEffect(() => {
    setWindowSize(window.innerWidth);
  }, []);
  function moveToEnd() {
    const copyOrder = [...orderedGallery];
    copyOrder.push(copyOrder.shift() as any) as any;
    // copyOrder.shift();
    setIsNextPressed(true);
    // @ts-ignore
    dispatch({ type: "GALLERY_REORDERED", reorderedGallery: [...copyOrder] });
    // setTimeout(() => {
    //   // @ts-ignore
    //   dispatch({ type: "GALLERY_REORDERED", reorderedGallery: [...copyOrder] });
    // }, 1000);
    // setOrdered([...copyOrder]);
  }
  function reverseMove() {
    const copyOrder = [...orderedGallery];
    copyOrder.unshift(copyOrder.pop() as any) as any;
    // @ts-ignore
    dispatch({ type: "GALLERY_REORDERED", reorderedGallery: [...copyOrder] });
    // setOrdered([...copyOrder]);
  }
  const [exitTitleY, setExitTitleY] = useState(-100);
  const [exitTextVar, setTextVar] = useState("home");
  const [goingToNewPath, setGoingToNewPath] = useState(false);
  const YPositioning =
    windowSize > 1024 ? -720 : windowSize > -700 ? -600 : -100;

  console.log("orderedGallery", orderedGallery);
  console.log("exitTextVar", exitTextVar);
  console.log(
    "rotation",
    orderedGallery[0].name === orderedGallery[showNumber].name
      ? "same"
      : "not same"
  );

  const router = useRouter();
  // useEffect(() => {
  //   if (exitTitleY <= -101) {
  //     return setTextVar("notHome");
  //   } else {
  //     return setTextVar("home");
  //   }
  // }, [exitTitleY]);

  useEffect(() => {
    function togglePathChange() {
      if (router.pathname !== "/") {
        setGoingToNewPath(true);
      }
    }
    router.events.on("routeChangeStart", togglePathChange);
    return () => {
      router.events.off("routeChangeStart", togglePathChange);
    };
  }, [router.events, router.pathname]);
  // const [showOne, setShowOne] = useState(false);
  console.log("goingToNewPath", goingToNewPath);

  return (
    // <AnimatePresence mode="wait">
    <motion.div
      className="overflow-hidden"
      style={{ background: orderedGallery[0].background }}
      variants={{
        initial: {
          background: "#6d7671",
          opacity: 0.9,
        },
        animate: {
          background: orderedGallery[0].background,
          opacity: 1,
        },
        exit: {
          // opacity: 0.5,
          // transition: { duration: 0.2 },
        },
      }}
      animate={"animate"}
      exit="exit"
      transition={{ duration: 0.5 }}
    >
      <Head>
        <title>Artist Studio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="relative flex items-center justify-center h-screen w-full text-white font-medium">
        <motion.div
          exit={{
            opacity: 0,
            transition: { duration: 1 },
          }}
          className="absolute left-12 text-xl lg:space-y-2"
        >
          <motion.div
            initial={{ opacity: 0, y: -200 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{
              duration: 0.5,
              delay: 1.5,
            }}
            exit={{ y: 2, transition: { delay: 0 } }}
          >
            {/* <AnimatePresence> */}
            <motion.span
              initial={{ y: -10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              key={`${orderedGallery[0].type}-${showNumber}`}
              exit={{ y: 200, opacity: [1, 0] }}
            >
              0{showNumber + 1}
            </motion.span>
            {/* </AnimatePresence> */}
          </motion.div>
          <motion.div
            className="w-1 mx-auto h-32"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{
              duration: 0.5,
              delay: 1.5,
            }}
          >
            <motion.div
              className=""
              key={"showNumber"}
              initial={"initial"}
              animate={"animate"}
              // custom={(showNumber / 5) * 100 }
              transition={{
                duration: 0.5,
                // delay: 1.5,
                type: "spring",
              }}
              exit={{
                opacity: 0,
                transition: {
                  delay: 1.5,
                  duration: 1,
                },
              }}
              variants={{
                initial: {
                  height: `${((showNumber + 1) / 5) * 100}%`,
                  background: "transparent",
                },
                animate: () => ({
                  height: `${((showNumber + 1) / 5) * 100}%`,
                  background: "#ffffff",
                }),
              }}
            ></motion.div>
          </motion.div>
          {/* <div>{showNumber + 1}</div> */}
          <motion.div
            initial={{ opacity: 0, y: -200 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{
              duration: 0.5,
              delay: 1.5,
            }}
          >
            05
          </motion.div>
          {/* </AnimatePresence> */}
        </motion.div>
        <motion.div
          key={"container-home"}
          className="flex flex-col md:flex-row items-center justify-between w-full md:w-3/4 lg:w-[800px] 3xl:w-full 3xl:max-w-7xl h-[50vh] space-y-12 md:space-y-0 mx-auto absolute text-white"
        >
          {/* <AnimatePresence> */}
          <motion.button
            key={"prev-btn"}
            className="flex items-center space-x-2 3xl:left-0"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{
              opacity: 0,
              y: 200,
              transition: { duration: 0.65, delay: 0.5 },
            }}
            transition={{ delay: 1.5 }}
            onClick={() => {
              setShowNumber((prev) => {
                if (prev === 0) return prev;
                reverseMove();
                return prev - 1;
              });
            }}
          >
            <motion.div className="uppercase text-lg lg:text-3xl font-thin tracking-[0.2rem] z-[20]">
              prev
            </motion.div>
            <motion.div className="border-t-2 w-4 lg:w-16"></motion.div>
          </motion.button>
          <motion.div
            key={"gallery-container"}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            // exit={{ rotate }}
            transition={{ duration: 0.75 }}
            className="mx-auto absolute h-[50vh] left-0 right-0 flex items-center justify-center flex-grow"
          >
            {/* <AnimatePresence mode="popLayout"> */}
            <ImageAnimation2
              showNumber={showNumber}
              goingToNewPath={goingToNewPath}
              setGoingToNewPath={setGoingToNewPath}
              orderedGallery={orderedGallery}
            />

            {/* {orderedGallery.map((n, i) => {
              return (
                <ImageAnimation
                  animateVar={animateVar}
                  n={n}
                  i={i}
                  ordered={orderedGallery}
                  key={i}
                  setExitTitleY={setExitTitleY}
                  isNextPressed={isNextPressed}
                  setIsNextPressed={setIsNextPressed}
                  showNumber={showNumber}
                />
              );
            })} */}
            {/* </AnimatePresence> */}
          </motion.div>
          {/* <AnimatePresence mode="sync"> */}
          <motion.button
            key={"next-btn"}
            className="flex items-center space-x-2 3xl:right-0 z-[20]"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{
              opacity: 0,
              y: 200,
              transition: { duration: 0.65, delay: 0.5 },
            }}
            transition={{ delay: 1.5 }}
            onClick={() => {
              // setIsNextPressed(true);
              setTitleTextDelayDuration(0);
              // setTestingAnimation("bringToFront");
              setShowNumber((prev) => {
                if (prev === orderedGallery.length - 1) {
                  return prev;
                }
                console.log("orderedGallery1", orderedGallery);
                moveToEnd();
                console.log("orderedGallery2", orderedGallery);
                console.log("originalFirst", orderedGallery[prev]);
                console.log("originalNow", orderedGallery[0]);
                return prev + 1;
              });
              setTimeout(() => {
                if (setIsNextPressed) {
                  setIsNextPressed(false);
                }
              }, 2001);
            }}
          >
            <motion.div className="border-t-2 w-4 lg:w-16"></motion.div>
            <div className="uppercase text-xl lg:text-3xl font-thin tracking-[0.2rem] md:mr-32">
              Next
            </div>
          </motion.button>
          {/* </AnimatePresence> */}
        </motion.div>

        {/* <AnimatePresence mode="popLayout"> */}
        <motion.div
          className="absolute -bottom-6 md:-bottom-12 lg:-bottom-10 xl:-bottom-14 2xl:-bottom-24 3xl:-bottom-40 "
          initial={{ y: 300, opacity: 0 }}
          animate={{
            y: 0,
            opacity: 0.5,
            transition: { delay: titleTextDelayDuration },
          }}
          // animate={
          //   !goingToNewPath
          //     ? {
          //         y: 0,
          //         opacity: 0.5,
          //         transition: { delay: titleTextDelayDuration },
          //       }
          //     : { opacity: [0, 0.5], y: [0, -720] }
          // }
          exit={{
            y: [0, -720],
            opacity: [0.5, 1],
            transition: { duration: 0.75, delay: 0.5 },
          }}
          key={`${orderedGallery[showNumber].type}`}
          variants={{
            home: {
              y: -200,
              // opacity: 0.5,
            },
            notHome: {
              // opacity: [0.5, 1],
              y: [0, exitTitleY],
              transition: {
                duration: 0.75,
                delay: 0.25,
                // from: -100,
              },
            },
          }}
          transition={{ delay: titleTextDelayDuration }}
          // key={`${orderedGallery[0].type}`}
        >
          <h2 className="z-[200] text-7xl sm:text-[128px] 2xl:text-[236px] tracking-[0.3rem] capitalize">
            {orderedGallery[0].type}
          </h2>
        </motion.div>
        {/* </AnimatePresence> */}
      </main>
    </motion.div>
    // </AnimatePresence>
  );
}

Home.getLayout = function getLayout(page: any) {
  return <Layout>{page}</Layout>;
};
