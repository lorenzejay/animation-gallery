import { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";

import {
  AnimatePresence,
  motion,
  Reorder,
  useAnimationControls,
} from "framer-motion";

const CARD_OFFSET = 10;
const SCALE_FACTOR = 0.06;
export default function StaticInitial() {
  const [titleTextDelayDuration, setTitleTextDelayDuration] = useState(1.5);
  const [testingAnimation, setTestingAnimation] = useState("");
  const variants = {
    bringToBack: (zIndex: number) => ({
      opacity: 0.8,
      zIndex,
      rotate: 4,
    }),
    bringToFront: (zIndex: number) => ({
      opacity: 1,
      rotate: 0,
      zIndex,
    }),
  };
  const animation1 = useAnimationControls();
  const animation2 = useAnimationControls();
  const animation3 = useAnimationControls();
  const animation4 = useAnimationControls();
  const animation5 = useAnimationControls();

  const [showNumber, setShowNumber] = useState(0);
  const [ordered, setOrdered] = useState([
    {
      slug: "/portraits",
      type: "portraits",
      name: "mikitA",
      imageSrc: "/gallery/mikita.jpg",
      animation: animation1,
      sequence: sequence1,
      background: "#6d7671",
      x: 0,
    },
    {
      slug: "/vivid",
      type: "vivid",
      name: "oladimeji",
      imageSrc: "/gallery/oladimeji.jpg",
      x: -700,
      initial: { x: -700 },
      transition: {
        duration: 0.5,
        // delay: 0.35,
      },
      sequence: sequence2,
      animation: animation2,
      background: "#708C99",
    },
    {
      slug: "/kimson",
      type: "lifestyle",
      name: "kimson",
      imageSrc: "/gallery/kimson.jpg",
      initial: { x: -380 },
      transition: {
        duration: 0.5,
        // delay: 0.2,
      },
      x: -380,
      sequence: sequence3,
      animation: animation3,
      background: "#D5D1CB",
    },

    {
      slug: "/fashion",
      type: "fashion",
      name: "behrouz",
      imageSrc: "/gallery/behrouz.jpg",
      initial: { x: 380 },
      transition: {
        duration: 0.5,
        // delay: 0.2,
      },
      x: 380,
      sequence: sequence4,
      animation: animation4,
      background: "#d1ac77",
    },
    {
      slug: "/artwork",
      type: "artwork",
      name: "lucas",
      imageSrc: "/gallery/lucas.jpg",
      x: 700,
      initial: { x: 700 },
      transition: {
        duration: 0.5,
        // delay: 0.35,
      },
      sequence: sequence5,
      animation: animation5,
      background: "#664F42",
    },
  ]);
  const [animationNumber, setAnimationNumber] = useState(animation1);

  async function sequence5() {
    await animation5.start({ opacity: 1 });

    await animation5.start({ x: 0 });
    return await animation5.start({ rotate: 10 });
  }
  async function sequence1() {
    await animation1.start({ opacity: 1 });

    return await animation1.start({ x: 0 });
    // return await animation1.start({ rotate: 10 });
  }
  async function sequence2() {
    await animation2.start({ opacity: 1 });

    await animation2.start({ x: 0 });
    return await animation2.start({ rotate: -10 });
  }
  async function sequence3() {
    await animation3.start({ opacity: 1 });
    await animation3.start({ x: 0 });
    return await animation3.start({ rotate: 20 });
  }
  async function sequence4() {
    await animation4.start({ opacity: 1 });
    await animation4.start({ x: 0 });
    return await animation5.start({ rotate: -20 });
  }

  function moveToEnd() {
    const copyOrder = [...ordered];
    const shifted = copyOrder.shift();
    copyOrder.push(shifted as any);
    setOrdered((prev) => {
      console.log("prevArr", prev);
      return copyOrder;
    });
    console.log("new ordered", ordered);
  }
  useEffect(() => {
    console.log("ordered", ordered[showNumber]);
  }, [showNumber, ordered]);

  return (
    <>
      <AnimatePresence>
        <motion.div
          className="overflow-hidden"
          style={{ background: ordered[showNumber].background }}
          variants={{
            initial: {
              background: "#6d7671",
              opacity: 0.9,
            },
            animate: {
              background: ordered[showNumber].background,
              opacity: 1,
            },
            exit: {
              opacity: 0,
            },
          }}
          animate={"animate"}
          exit="exit"
          transition={{ duration: 0.5 }}
        >
          <Head>
            <title>Artist Studio</title>
            <meta name="description" content="Generated by create next app" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <motion.nav
            initial={{ opacity: 0, y: -200 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 1.5 }}
            className="text-white max-w-7xl mx-auto py-4 px-4 sm:px-12 3xl:px-0 flex items-center justify-between"
          >
            <div>
              <motion.svg
                xmlns="http://www.w3.org/2000/svg"
                className="icon icon-tabler icon-tabler-menu"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
                initial={{ y: 150 }}
                animate={{ y: 0 }}
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M4 8l16 0"></path>
                <path d="M4 16l16 0"></path>
              </motion.svg>
            </div>
            <motion.div
              initial={{ y: 150 }}
              animate={{ y: 0 }}
              className="uppercase text-3xl lg:text-5xl italic tracking-[0.2rem]"
            >
              untitled 001
            </motion.div>
            <div>
              <motion.svg
                xmlns="http://www.w3.org/2000/svg"
                className="icon icon-tabler icon-tabler-brand-instagram"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
                initial={{ y: 150 }}
                animate={{ y: 0 }}
              >
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M4 4m0 4a4 4 0 0 1 4 -4h8a4 4 0 0 1 4 4v8a4 4 0 0 1 -4 4h-8a4 4 0 0 1 -4 -4z"></path>
                <path d="M12 12m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0"></path>
                <path d="M16.5 7.5l0 0"></path>
              </motion.svg>
            </div>
          </motion.nav>
          <main className="relative flex items-center justify-center h-[92vh] w-full">
            <div className="absolute left-32 text-4xl space-y-12  bg-red-500 z-[1000]">
              <div>01</div>
              <div>{showNumber}</div>
              <div>05</div>
            </div>
            <motion.div className="flex items-center justify-between w-[1200px] h-full mx-auto absolute text-white">
              <motion.button
                className="flex items-center space-x-2"
                initial={{ opacity: 0, y: 400 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 1.5 }}
                // onClick={() => moveToEnd()}
              >
                <motion.div className="uppercase text-3xl font-thin tracking-[0.2rem]">
                  prev
                </motion.div>
                <motion.div className="border-t-2 w-16"></motion.div>
              </motion.button>
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="flex items-center justify-center flex-grow relative top-0 ml-64 mb-72 2xl:mb-[450px]"
              >
                <AnimatePresence
                // onReorder={setOrdered}
                // values={ordered}
                >
                  {ordered.map((n, i) => {
                    return (
                      <motion.div
                        // value={n}
                        key={i}
                        className={` max-w-sm top-0 right-0 left-0`}
                        initial="initial"
                        animate={"animate"}
                        custom={i === 0 ? 0 : ordered.length - i * 5}
                        variants={{
                          initial: {
                            opacity: 1,
                            position: "relative",
                            x: n.x,
                          },
                          remove: {
                            x: 200,
                            opacity: 0.8,
                          },

                          animate: (rotationAmount) => ({
                            opacity: 1,
                            rotate: rotationAmount,
                            position: "absolute",
                            zIndex: ordered.length - i,
                            x: 0,
                            transition: {
                              duration: 1,
                            },
                          }),
                        }}
                        // animate={{
                        //   top: i * -CARD_OFFSET,
                        //   // scale: 1 - i * SCALE_FACTOR,
                        //   zIndex: ordered.length - i,
                        //   ...n.animation,
                        //   // rotate: 0,
                        // }}
                        onViewportEnter={n.sequence}
                        transition={n?.transition}
                        exit={{
                          opacity: 0,
                        }}
                      >
                        <Image
                          src={n.imageSrc}
                          alt="s"
                          width={1920}
                          height={2880}
                          className="max-h-[480px]"
                        />
                      </motion.div>
                    );
                  })}
                </AnimatePresence>
              </motion.div>
              <motion.button
                className="flex items-center space-x-2"
                initial={{ opacity: 0, y: 400 }}
                animate={{ opacity: 1, y: 0, scale: 1 - 0 * 0.06 }}
                transition={{ delay: 1.5 }}
                onClick={() => {
                  setTitleTextDelayDuration(0.15);
                  setTestingAnimation("bringToFront");
                  moveToEnd();
                  setShowNumber((prev) => {
                    console.log("this is what should move", ordered[prev]);

                    setAnimationNumber(ordered[prev].animation);
                    if (prev === ordered.length - 1) {
                      return 0;
                    }
                    return prev + 1;
                  });

                  console.log("this is what should move", ordered[showNumber]);
                  // animation1.start({duratio})
                  // animation1.start({ x: 100, opacity: 0 });
                  // animation1.stop();
                  // animation2.start({ z: 10 });
                  // animation3.start({ rotate: 6 });
                  // animation4.start({ rotate: 6 });
                  // animation5.start({ rotate: 5 });
                  // animation2.start({
                  //   rotate: 0,
                  //   z: 50,
                  //   transition: {
                  //     delay: 0.5,
                  //   },
                  // });
                  // animation2.start({ x: 0, opacity: 1 });
                }}
              >
                <motion.div className="border-t-2 w-16"></motion.div>
                <div className="uppercase text-3xl font-thin tracking-[0.2rem]">
                  Next
                </div>
              </motion.button>
            </motion.div>
            {/* <motion.div
              className="flex relative bg-red-500 w-full"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              {ordered.map((n, i) => {
                return (
                  <motion.div
                    key={i}
                    className={`absolute max-w-sm z-10 top-0 right-0 left-0`}
                    initial={{ ...n?.initial }}
                    animate={{
                      top: i * -CARD_OFFSET,
                      scale: 1 - i * SCALE_FACTOR,
                      zIndex: ordered.length - i,
                      ...n?.animation,
                    }}
                    onViewportEnter={n?.sequence}
                    transition={n?.transition}
                  >
                    <Image
                      src={n.imageSrc}
                      alt="s"
                      width={1920}
                      height={2880}
                      className="max-h-[480px]"
                    />
                  </motion.div>
                );
              })}
            </motion.div> */}
            <AnimatePresence>
              <motion.div
                className="absolute -bottom-40 "
                initial={{ y: 100, opacity: 0 }}
                animate={{
                  y: 0,
                  opacity: 0.8,
                  // transition: {
                  //   // duration: 0.5,

                  //   // when: "",
                  //   // delay: 1.5,
                  // },
                }}
                exit={{
                  opacity: 0,
                  y: -100,
                  transition: { delay: 0, duration: 0.3 },
                }}
                transition={{ ease: "easeIn", delay: titleTextDelayDuration }}
                key={ordered[showNumber].type}
              >
                <motion.h2 className="text-[236px] text-white tracking-[0.3rem] capitalize">
                  {ordered[showNumber].type}
                </motion.h2>
              </motion.div>
            </AnimatePresence>
          </main>
        </motion.div>
      </AnimatePresence>
    </>
  );
}
